// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  sessions          Session[]
  submittedExpenses Expense[] @relation("SubmittedExpenses")
  approvedExpenses  Expense[] @relation("ApprovedExpenses")
  rejectedExpenses  Expense[] @relation("RejectedExpenses")
  roles             UserRole[]
  managedUsers      User[]    @relation("UserManager")
  manager           User?     @relation("UserManager", fields: [managerId], references: [id])
  managerId         String?
  committees       CommitteeMember[]
  approvals         Approval[]
  categories        CategoryEmployee[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @default(now())
  uploadTokens      UploadToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expense {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  title           String
  description     String?
  amount          Float
  currency        String
  expenseDate     DateTime      @default(now())
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  billingType     BillingType
  status          ExpenseStatus @default(PENDING)
  submittedBy     User          @relation("SubmittedExpenses", fields: [submittedById], references: [id])
  submittedById   String
  attachments     Attachment[]
  approvedBy      User?         @relation("ApprovedExpenses", fields: [approvedById], references: [id])
  approvedById    String?
  approvedAt      DateTime?
  rejectedBy      User?         @relation("RejectedExpenses", fields: [rejectedById], references: [id])
  rejectedById    String?
  rejectedAt      DateTime?
  rejectionReason String?
  approvals       Approval[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  expenses    Expense[]
  committees  Committee[]
  categoryEmployees CategoryEmployee[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Committee {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  members     CommitteeMember[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CommitteeMember {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String
  createdAt   DateTime  @default(now())

  @@unique([userId, committeeId])
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  fileType    String
  fileSize    Int
  url         String
  expense     Expense   @relation(fields: [expenseId], references: [id])
  expenseId   String
  createdAt   DateTime  @default(now())
}

model Approval {
  id          String    @id @default(cuid())
  expense     Expense   @relation(fields: [expenseId], references: [id])
  expenseId   String
  approver    User      @relation(fields: [approverId], references: [id])
  approverId  String
  status      ApprovalStatus
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  users       UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email])
}

model UploadToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model CategoryEmployee {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())

  @@unique([userId, categoryId])
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ApprovalStatus {
  APPROVED
  REJECTED
  PENDING
}

enum BillingType {
  INTERNAL
  PROJECT
}
